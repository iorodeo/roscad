"""
Copyright 2010  IO Rodeo Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
from __future__ import division
import copy
import math
import re
import textwrap
import numpy


class BOMObject(object):
    def __init__(self):
        self.parameters_key_list = ['item number',
                                    'name',
                                    'description',
                                    'dimensions',
                                    'vendor',
                                    'part number',
                                    'quantity',
                                    'cost',
                                    ]
        self.parameters_default = {}
        for key in self.parameters_key_list:
            self.parameters_default[key] = ''

        self.parameters_default['quantity'] = 1
        self.parameters_default['cost'] = 0.00
        self.set_parameters()

    def set_parameters(self,parameters={}):
        parameters = copy.deepcopy(parameters)
        if type(parameters) == dict:
            if len(parameters) == 0:
                self.parameters = self.parameters_default
            elif set(parameters.keys()) == set(self.parameters.keys()):
                self.parameters = parameters
            else:
                for key in parameter.keys():
                    self.set_parameter(key,parameters[key])

    def get_parameters(self):
        return copy.deepcopy(parameters)

    def set_parameter(self,key,value):
        if type(key) != str:
            key = str(key)
        self.parameters[key] = copy.deepcopy(value)
        if key not in set(self.parameters_key_list):
            self.parameters_key_list.append(key)

    def get_parameter(self,key):
        if type(key) != str:
            key = str(key)
        if key not in self.parameters.keys():
            return ''
        else:
            return copy.deepcopy(self.parameters[key])

    def get_parameters_key_list(self):
        return copy.deepcopy(self.parameters_key_list)

class BOMExportMap(object):
    def __init__(self,obj):
        self.indent_str = " "*4

        self.comment_str = "#"

        self.block_open_str = ""

        self.block_close_str = ""

        self.item_str = '| | {item_number} | {name} | {description} | {dimensions} | {vendor} | {part_number} | {quantity} | {cost:.2f} |\n'

    def get_file_header_str(self,obj,filename):
        width = 70
        str_ = '-*- mode:org -*-\n'
        str0 = self.comment_str + '='*(width-len(self.comment_str)*2) + self.comment_str + '\n'
        # see "http://docs.python.org/library/string.html#formatspec"
        str1 = (self.comment_str + '{0:=^{1}}' + self.comment_str).format(" " + filename + " ", width-len(self.comment_str)*2)
        str1 += '\n' + self.comment_str + ' '*(width-len(self.comment_str)*2) + self.comment_str + '\n'
        str2 = "Autogenerated using ros_cad. Hand editing this file is not advisable as all modifications will be lost when the program which generated this file is re-run."
        # str2 uses width-(len(self.comment_str)*2 + 1) because of the extra space after the initial slashes
        str2 = "\n".join((self.comment_str + " {0:<{1}}" + self.comment_str).format(l, width-(len(self.comment_str)*2 + 1)) for l in
                         textwrap.wrap(str2, width=width-(len(self.comment_str)*2 + 1)))
        file_header_str = str_ + str0 + str1 + str2 + '\n' + str0 + '\n'

        return file_header_str

    def convert_item_to_str(self,item):
        item_str = ''
        if item != {}:
            item_str = self.item_str.format(item_number = item.get_parameter('item number'),
                                           name = item.get_parameter('name'),
                                           description = item.get_parameter('description'),
                                           dimensions = item.get_parameter('dimensions'),
                                           vendor = item.get_parameter('vendor'),
                                           part_number = item.get_parameter('part number'),
                                           quantity = item.get_parameter('quantity'),
                                           cost = item.get_parameter('cost'),
                                           )
        return item_str

    def get_object_bom(self,obj):
        try:
            bom = obj.get_obj_parameter('bom')
        except KeyError:
            bom = {}
        return bom

    def fill_item_dict(self,obj,item_dict={}):
        bom = self.get_object_bom(obj)
        if bom != {}:
            name = bom.get_parameter('name')
            if name in item_dict.keys():
                item = item_dict[name]
                quantity = item.get_parameter('quantity')
                if quantity == '':
                    quantity = 1
                quantity += 1
                item.set_parameter('quantity',quantity)
                item_dict[name] = item
            else:
                item_dict[name] = bom
        for o in obj.get_obj_list():
            item_dict = self.fill_item_dict(o,item_dict)
        return item_dict

    def sort_item_dict(self,item_dict):
        vendor_list = []
        for key in item_dict.keys():
            vendor_list.append(item_dict[key].get_parameter('vendor'))
        vendor_list = list(set(vendor_list))
        vendor_list.sort()
        item_dict_sorted = {}
        item_number = 1
        for vendor in vendor_list:
            name_list = []
            for key,value in item_dict.iteritems():
                ven = value.get_parameter('vendor')
                if ven == vendor:
                    name = value.get_parameter('name')
                    name_list.append(name)
            name_list.sort()
            for name in name_list:
                item = item_dict[name]
                item.set_parameter('item number',item_number)
                item_dict_sorted[item_number] = item
                item_number += 1

        return item_dict_sorted

    def get_objects_str(self,obj,depth=0):
        item_dict = self.fill_item_dict(obj)
        item_dict = self.sort_item_dict(item_dict)
        objects_str = ''
        column_name_list = []
        item_dict_keys = item_dict.keys()
        item_dict_keys.sort()
        for key in item_dict_keys:
            item = item_dict[key]
            objects_str += self.convert_item_to_str(item)
            item_key_list = item.get_parameters_key_list()
            [column_name_list.append(column_name) for column_name in item_key_list if column_name not in column_name_list]

        table_header = '| ! '
        for column_name in column_name_list:
            table_header += '| {column_name} '.format(column_name = column_name)
        table_header += '|\n|-\n'
        objects_str = table_header + objects_str

        objects_str += '|-\n| # '
        objects_str += '| '*(len(column_name_list) - 2)
        objects_str += '| total |'
        objects_str += ':=(@I$quantity..@II$quantity)*(@I$cost..@II$cost);%.2f;N'

        return objects_str

if __name__ == "__main__":
    bom_export_map = BOMExportMap()
