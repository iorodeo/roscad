"""
Copyright 2010  IO Rodeo Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
from __future__ import division
import copy
import math
import re
import textwrap
import numpy


class SCADPoints(object):
    def __init__(self,points,decimals=5,indent_str="",depth=0):
        self.points = points
        self.decimals = decimals
        self.indent_str = indent_str
        self.depth = depth

    def __str__(self):
        return_str = "[\n"
        for point in self.points:
            return_str += self.indent_str*self.depth*3 + "["
            for number in point:
                number_format_str = "{number:." + str(self.decimals) + "f}"
                number_str = number_format_str.format(number=number)
                return_str += number_str
                return_str += ","
            return_str = return_str[:-1]
            return_str += "],\n"
        return_str = return_str[:-2]
        return_str += "]"
        return return_str

class SCADExportMap(object):
    def __init__(self,obj):
        self.indent_str = " "*4

        self.comment_str = "//"

        self.block_open_str = "{"

        self.block_close_str = "}"

        self.fn_default = 50

        self.object_map = {'union': {'header':'union() {block_open}',
                                     'footer': '{block_close}'},
                           'intersection': {'header': 'intersection() {block_open}',
                                            'footer': '{block_close}'},
                           'difference': {'header': 'difference() {block_open}',
                                          'footer': '{block_close}'},
                           'merge': {'header': 'union() {block_open}',
                                     'footer': '{block_close}'},
                           'box': {'header': 'cube(size = [{x:0.5f},{y:0.5f},{z:0.5f}], center = true);',
                                   'footer': ''},
                           'sphere': {'header': 'sphere(r = {r:0.5f}, center = true);',
                                      'footer': ''},
                           'cylinder': {'header': 'cylinder(h = {l:0.5f}, r = {r:0.5f}, center = true);',
                                        'footer': ''},
                           'cone': {'header': 'cylinder(h = {l:0.5f}, r1 = {r_neg:0.5f}, r2 = {r_pos:0.5f}, center = true);',
                                    'footer': ''},
                           'extrusion': {'header': 'linear_extrude(height = {l:0.5f}, center = true, convexity = 10, twist = 0) {block_open}',
                                         'footer': '{block_close}'},
                           'rotation': {'header': 'rotate_extrude(convexity = 10) {block_open}',
                                         'footer': '{block_close}'},
                           'polygon':  {'header': 'polygon(\n{indent}{indent}points = {points},\n{indent}{indent}paths = {paths});',
                                        'footer': ''},
                           }

    def get_file_header_str(self,obj,filename):
        width = 70
        str0 = self.comment_str + '='*(width-len(self.comment_str)*2) + self.comment_str + '\n'
        # see "http://docs.python.org/library/string.html#formatspec"
        str1 = (self.comment_str + '{0:=^{1}}' + self.comment_str).format(" " + filename + " ", width-len(self.comment_str)*2)
        str1 += '\n' + self.comment_str + ' '*(width-len(self.comment_str)*2) + self.comment_str + '\n'
        str2 = "Autogenerated using ros_cad. Hand editing this file is not advisable as all modifications will be lost when the program which generated this file is re-run."
        # str2 uses width-(len(self.comment_str)*2 + 1) because of the extra space after the initial slashes
        str2 = "\n".join((self.comment_str + " {0:<{1}}" + self.comment_str).format(l, width-(len(self.comment_str)*2 + 1)) for l in
                         textwrap.wrap(str2, width=width-(len(self.comment_str)*2 + 1)))
        file_header_str = str0 + str1 + str2 + '\n' + str0 + '\n'

        facets_written = False
        try:
            file_header_str += '$fn = {facets.fn:d};\n'.format(facets = obj.get_object_parameter('facets'))
            facets_written = True
        except KeyError:
            pass
        try:
            file_header_str += '$fa = {facets.fa:d};\n'.format(facets = obj.get_object_parameter('facets'))
            facets_written = True
        except KeyError:
            pass
        try:
            file_header_str += '$fs = {facets.fs:d};\n'.format(facets = obj.get_object_parameter('facets'))
            facets_written = True
        except KeyError:
            pass
        if not facets_written:
            file_header_str += '$fn = {fn:d};\n'.format(fn = self.fn_default)

        return file_header_str

    def get_dimensions_from_polygon(self,obj,depth):
        dimensions = obj.get_dimensions()
        points = obj.get_points()
        # print "points = "
        # print points
        decimals = obj.get_decimals()
        scad_points = SCADPoints(points,decimals,self.indent_str,depth)
        dimensions['points'] = scad_points
        paths = obj.get_paths()
        dimensions['paths'] = paths
        return dimensions

    def get_object_str(self,obj,depth):
        primative = obj.get_primative()
        obj_str = ""
        if primative != '':
            if primative in self.object_map:
                if primative == 'polygon':
                    dimensions = self.get_dimensions_from_polygon(obj,depth)
                else:
                    dimensions = obj.get_dimensions()

                dimensions['block_open'] = '{block_open}'
                dimensions['block_close'] = '{block_close}'
                dimensions['indent'] = self.indent_str*depth
                obj_str = self.object_map[primative]['header']
                obj_str = obj_str.format(**dimensions)

                if (primative == 'union') or (primative == 'intersection') or (primative == 'difference') or (primative == 'merge'):
                    obj_list_len = obj.get_obj_list_len()
                    if obj_list_len < 2:
                        obj_str = ""

        return obj_str

    def get_object_header_str(self,obj,depth):
        position = obj.get_position()
        rotation = obj.get_rotation()
        scale = obj.get_scale()
        parameters = obj.get_object_parameters()

        if 'color' in parameters:
            color = parameters['color']
        else:
            color = []
        if 'slice' in parameters:
            slice = parameters['slice']
        else:
            slice = False
        angles = [a*(180/math.pi) for a in rotation]

        obj_str = "{indent}{slice}{translate}{rotate}{scale}{color}"

        if not numpy.allclose(position,[0,0,0]):
            translate_str = "translate(v=[{position[0]:0.5f},{position[1]:0.5f},{position[2]:0.5f}]){block_open} "
        else:
            translate_str = ""
        if not numpy.allclose(angles,[0,0,0]):
            rotate_str = "rotate(a=[{angles[0]:0.5f},{angles[1]:0.5f},{angles[2]:0.5f}]){block_open} "
        else:
            rotate_str = ""
        if not numpy.allclose(scale,[1,1,1]):
            scale_str = "scale(v=[{scale[0]:0.5f},{scale[1]:0.5f},{scale[2]:0.5f}]){block_open} "
        else:
            scale_str = ""
        if len(color) != 0:
            color_str = "color([{color[0]:0.5f},{color[1]:0.5f},{color[2]:0.5f},{color[3]:0.5f}]){block_open} "
        else:
            color_str = ""
        if slice:
            slice_str = "projection(cut=true){block_open} "
        else:
            slice_str = ""

        obj_str = obj_str.format(indent = self.indent_str*depth,
                                 slice = slice_str,
                                 translate = translate_str,
                                 rotate = rotate_str,
                                 scale = scale_str,
                                 color = color_str)
        obj_str = obj_str.format(block_open = '{block_open}',
                                 position = position,
                                 angles = angles,
                                 scale = scale,
                                 color = color)
        obj_str += '{obj}\n'
        return obj_str

    def get_object_footer_str(self,obj,depth):
        primative = obj.get_primative()
        position = obj.get_position()
        rotation = obj.get_rotation()
        scale = obj.get_scale()
        parameters = obj.get_object_parameters()

        if 'color' in parameters:
            color = parameters['color']
        else:
            color = []
        if 'slice' in parameters:
            slice = parameters['slice']
        else:
            slice = False

        angles = [a*(180/math.pi) for a in rotation],

        obj_footer_str = "{indent}{slice}{translate}{rotate}{scale}{color}{obj_footer}\n"

        if not numpy.allclose(position,[0,0,0]):
            translate_str = "{block_close}"
        else:
            translate_str = ""
        if not numpy.allclose(angles,[0,0,0]):
            rotate_str = "{block_close}"
        else:
            rotate_str = ""
        if not numpy.allclose(scale,[1,1,1]):
            scale_str = "{block_close}"
        else:
            scale_str = ""
        if len(color) != 0:
            color_str = "{block_close}"
        else:
            color_str = ""
        if slice:
            slice_str = "{block_close}"
        else:
            slice_str = ""

        footer_str = ""
        if primative != '':
            if primative in self.object_map:
                footer_str = self.object_map[primative]['footer']

        obj_footer_str = obj_footer_str.format(indent = self.indent_str*depth,
                                               slice = slice_str,
                                               translate = translate_str,
                                               rotate = rotate_str,
                                               scale = scale_str,
                                               color = color_str,
                                               obj_footer = footer_str)

        return obj_footer_str

    def get_objects_str(self,obj,depth=0):
        objects_str = ''
        obj_str = self.get_object_str(obj,depth)
        if obj_str != '':
            obj_header_str = self.get_object_header_str(obj,depth)
            obj_header_str = obj_header_str.format(block_open = '{block_open}',
                                                   block_close = '{block_close}',
                                                   obj = obj_str)
        else:
            obj_header_str = ''

        objects_str += obj_header_str

        if 0 < obj.get_obj_list_len():
            for o in obj.get_obj_list():
                if obj_header_str != '':
                    objects_str = '{objects_str}{obj}'.format(objects_str = objects_str,
                                                              obj = self.get_objects_str(o,(depth+1)),
                                                              block_open = '{block_open}',
                                                              block_close = '{block_close}')
                else:
                    objects_str = '{objects_str}{obj}'.format(objects_str = objects_str,
                                                              obj = self.get_objects_str(o,depth),
                                                              block_open = '{block_open}',
                                                              block_close = '{block_close}')

        if obj_header_str != '':
            obj_footer_str = self.get_object_footer_str(obj,depth)
            objects_str += obj_footer_str

        if depth == 0:
            objects_str = objects_str.format(block_open = self.block_open_str,
                                             block_close = self.block_close_str)

        return objects_str


if __name__ == "__main__":
    scad_export_map = SCADExportMap()
